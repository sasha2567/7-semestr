;;;; 2015-10-12 10:53:47
;;;; This is your lisp file. May it serve you well.

;1 лаба------------------------------------------------------------------------------------------------

(defun lab1_func_list(x y z)
  (let* ((l1 (list x y z)))
    (when (NUMBERP (second l1))
      (when (or (EQUAL (rem (second l1) 7) 0) (EQUAL (rem (second l1) 5) 0))
        (setf res l1)
        (setf (SECOND res) 35)
        res
      )
    )
    (and
      (append (list (first l1)) (cddr l1))
    )
  )
)

;2 лаба------------------------------------------------------------------------------------------------

(defun lab2_atom_from_list(x y)
  (let* ((l2 x))
    (setf k 0)
    (dolist (z l2)
      (when (atom z)
        (setf k (+ k 1))
      )
      (when (= k y)
        (return z)
      )
    )
  )
)

(defun lab2_atom_from_list_rec(x y &optional z)
  (if(= 0 y)
    z
    (if (atom (car x))
	  (lab2_atom_from_list_rec (cdr x) (- y 1) (car x))
	  (lab2_atom_from_list_rec (cdr x) y (car x))
	)
  )
)


(defun lrtrace(n k)
  (trace lab2_atom_from_list_rec)
  (lab2_atom_from_list_rec n k)
  (untrace lab2_atom_from_list_rec)
)

;(LAB2_ATOM_FROM_LIST_REC (list 1 2 3 (list 4 5) 6 7) 2)
;(lrtrace (list 1 2 3 (list 4 5) 6 7) 2)

;3 лаба------------------------------------------------------------------------------------------------

(defun CreateDB (a b c d e f g)
  (list (list :number a :fio b :yearb c :yearp d :markF e :markVM f :markPr g))
)

(defun AddRow(db a b c d e f g)
  (adjoin (list :number a :fio b :yearb c :yearp d :markF e :markVM f :markPr g) db)
)

(defun SaveDB(db filePath)
  (with-open-file (out filePath
                   :direction :output
                   :if-exists :supersede)
    (with-standard-io-syntax
      (print db out)
    )
  )
)

(defun ReadDB (filePath)
  (with-open-file (in filePath)
    (with-standard-io-syntax
      (read in)
    )
  )
)

(defun Update (db selector-func &key MarkF MarkVM MarkPr)
    (mapcar
      #'(lambda (record)
          (when (funcall selector-func record)
            (if MarkF (setf (getf record :markF) MarkF))
            (if MarkVM (setf (getf record :markVM) MarkVM))
            (if MarkPr (setf (getf record :markPr) MarkPr))
          )
          record
        )
      db
    )
 )

(defun NumberSelector (value)
  #'(lambda (x) (equal (getf x :number) value))
)

(defun GetFromBase(db mark)
  (format t "~%All troechniki~%")
  (setf count 0)
  (dolist (elem db)
    (cond 
      (
        (equal (getf elem :markF) mark) 
        (format t "~%|~{~a:~10t~a~10t~}|" 
          (list :number (getf elem :number) :fio (getf elem :fio))
        )
        (setf count (+ count 1))
      )
      (
        (equal (getf elem :markVM) mark) 
        (format t "~%|~{~a:~10t~a~10t~}|"
          (list :number (getf elem :number) :fio (getf elem :fio))
        )
        (setf count (+ count 1))
      )
      (
        (equal (getf elem :markPr) mark) 
        (format t "~%|~{~a:~10t|~a~10t~}|" 
          (list :number (getf elem :number) :fio (getf elem :fio))
        )
        (setf count (+ count 1))
      )
    )
  )
  (when (equal 0 count)
    (format t "~%~%Base have not troechniki~%")
  )
  (when (> count 0)
    (format t "~%~%Base have ~R troechniki~%" count)
  )
)

(defun PrintDB (db)
  (dolist (elem db)
    (format t "~%~{~a:~10t~a~%~}" elem)
  )
)
;----------------------------------------------------
(setf db (CreateDB 1 "Ikitjan" 1995 2012 5 3 4))
(setf db (AddRow db 2 "Lisajnsky" 1994 2012 5 5 5))
(setf db (AddRow db 3 "Dajdyshenko" 1994 2012 5 4 5))
(setf db (AddRow db 4 "Inal'ev" 1994 2012 4 3 4))
(PrintDB db)
(GetFromBase  db 3)
(setf db (Update db (NumberSelector 1) :markF 5 :markVM 4 :markPr 4))
(GetFromBase  db 3)
;(SaveDB db "D:\\file.dat")
;(setf db (ReadDB "D:\\file.dat"))
;(PrintDB db)
(format t "~%~%1994 is ~R ~%" 1994)


;4 лаба------------------------------------------------------------------------------------------------
(defun match (p d) 
(cond
  ((and (null p)(null d)) t)
  ((and (null d)
     (eq (car p) '$)
     (null (cdr p))) t)
  ((or (null p)(null d)) nil)
  (
    (or (equal (car p) '?)
     (equal (car p) (car d))
      )
    (match (cdr p)(cdr d))
    )
  ((eq (car p) '$)
    (cond ((match (cdr p) d) t)
      ((match p (cdr d)) t))
    )
  (
    (and (not (atom (car p)))
     (not (atom (car d)))
     (match (car p)(car d))
     )
    (match (cdr p) (cdr d)) 
    )
  (
    (and (atom (car p))
     (eq (car-letter (car p)) #\?)
     (match (cdr p)(cdr d))
     )
    (set (cdr-name (car p)) (car d)) t
    )
  (
    (and (atom (car p))
     (eq (car-letter (car p)) #\$)
     )
    (cond ((match (cdr p)(cdr d))
            (set (cdr-name (car p)) (list (car d)))
            t)
      (
        (match p (cdr d))
        (set (cdr-name (car p))
          (cons (car d)(eval (cdr-name (car p))))
          )
        t)
      )
    )
  (
    (and (not(atom (car p)))
      (eq (caar p) 'restrict)
      (eq (cadar p) '?)
      (and-to-list
        (mapcar #'(lambda (pred)
                    (funcall pred (car d))) (cddar p)
          )
        )
      )

    (match (cdr p)(cdr d))
    )
  (
    (and (not (atom (car p)))
      (not (atom d))
      (eq (caar p) 'restrict)
      (eq (car-letter (cadar p)) #\?)
      (and-to-list
        (mapcar #'(lambda (pred)
                    (funcall pred (car d))) (cddar p)))
      (match (cdr p)(cdr d))
      )
    (set (cdr-name (cadar p)) (car d))
    t)
  )
)
(defun get-matches (p db)  ;db - база данных ;p - запрос (образец)
  (cond ((null db) nil)
    ((match p (car db))
     (cons (car db) (get-matches p (cdr db)))
     )
    (t (get-matches p (cdr db)))
    )
  )
(defun car-letter (x) 
  (if (not (numberp x)) 
    (car (coerce (string x) 'list)))
 )
(defun cdr-name (x)
  (intern (coerce (cdr (coerce (string x) 'list)) 'string)))
(defun and-to-list ( lis )
  (let ((res t))
    (dolist (temp lis res)
      (setq res (and res temp)))
  )
)
(defun zapros (db) 
  (let ((fact (read)))
    (cond 
      ((match '($ state in ?V $) fact)  
       (dolist (elem (get-matches (list ':number '? ':fio '? ':yearb '? ':yearp V ':markF '? ':markVM '? ':markPr '?) db)) 
         (format t "~%~{~a:~10t~a~%~}" (list :fio (getf elem :fio)) ))
      )
      ((match '($ born in ?V $) fact)  
       (dolist (elem (get-matches (list ':number '? ':fio '? ':yearb V ':yearp '? ':markF '? ':markVM '? ':markPr '?) db)) 
         (format t "~%~{~a:~10t~a~%~}" (list :fio (getf elem :fio)) ))
      )
      ((match '($ student ?S mark on programming $) fact)  
       (dolist (elem (get-matches (list ':number '? ':fio S ':yearb '? ':yearp '? ':markF '? ':markVM '? ':markPr '?) db)) 
         (format t "~%~{~a:~10t~a~%~}" (list :fio (getf elem :fio) :markVM  (getf elem :markPr)) ))
      )
      ((match '($ student ?S mark on fiziks $) fact)  
       (dolist (elem (get-matches (list ':number '? ':fio S ':yearb '? ':yearp '? ':markF '? ':markVM '? ':markPr '?) db)) 
         (format t "~%~{~a:~10t~a~%~}" (list :fio (list :fio (getf elem :fio) :markVM  (getf elem :markF)) ))
      )
      ((match '($ student ?S mark on VM $) fact)  
       (dolist (elem (get-matches (list ':number '? ':fio S ':yearb '? ':yearp '? ':markF '? ':markVM '? ':markPr '?) db)) 
         (format t "~%~{~a:~10t~a~%~}" (list :fio (getf elem :fio) :markVM  (getf elem :markVM)) ))
      )
      (t (princ "Неизвестный запрос"))
      )
    )
  )
 )
